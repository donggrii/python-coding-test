# 문제 : 일직선으로 이어져 있는 N개의 식량창고에서 선택적으로 약탈하여 얻을 수 있는 식량의 최댓값 구하기
#        하지만 서로 인접한 식량창고를 선택할 수는 없고, 최소한 1칸 이상 떨어진 식량창고를 약탈해야 함
# 조건 : 3 <= N (식량창고의 개수) <= 100, 0 <= K (저장된 식량의 개수) <= 1,000

# < 답안 예시 > : DP Table에 i번째 상황에서 최대로 약탈할 수 있는 식량 개수를 계속 저장해나감
# < 아이디어 >
# 식량창고를 털지 안 털지를 결정하는 경우, 단 2가지 경우에 대해서만 확인하면 됨
#   a. (i - 1)번째 식량창고를 털기로 결정한 경우, 현재의 식량창고를 털 수 없음
#   b. (i - 2)번째 식량창고를 털기로 결정한 경우, 현재의 식량창고를 털 수 있음
#   -> a, b 중 더 많은 식량을 털 수 있는 경우를 선택하면 됨
#   -> 점화식 : a_i = max(a_{i - 1}, (a_{i - 2} + k_i))
n = int(input())
array = list(map(int, input().split()))  # 모든 식량 정보 입력받기
d = [0] * 100  # 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (Bottom-Up)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + array[i])

print(d[n - 1])  # 계산된 결과 출력


# Test Case.
# < input >
# 4
# 1 3 1 5

# output : 8
