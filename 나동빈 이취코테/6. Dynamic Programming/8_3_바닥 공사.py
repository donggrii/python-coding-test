# 문제 : 가로의 길이가 N, 세로의 길이가 2인 직사각형 형태의 바닥을 3가지 타일로 채울 수 있는 모든 경우의 수 구하기
#        3가지 타일은 1 x 2의 타일, 2 x 1의 타일, 2 x 2의 타일임
# 조건 : 1 <= N (가로의 길이) <= 1,000
#        2 X N 크기의 바닥을 채우는 방법의 수를 796,796으로 나눈 나머지를 출력할 것

# < 답안 예시 >
# DP의 기초 예제에서 빠질 수 없는 타일링 문제 유형
# DP 문제에서는 종종 결과를 어떤 수로 나눈 결과를 출력하라는 경우가 많음 -> 단지 결과값이 커질 수 있기 때문
# < 아이디어 >
# 왼쪽부터 차례대로 바닥에 타일을 채운다고 가정하면,
#   a. 왼쪽부터 (i - 1)까지의 길이가 이미 타일로 채워져 있다면, 2 x 1 타일을 채우는 1가지 경우만 존재
#   b. 왼쪽부터 (i - 2)까지의 길이가 이미 타일로 채워져 있다면, 1 x 2 타일 2개를 채우는 경우와 2 x 2 타일 1개를 채우는 총 2가지 경우가 존재
#   -> b에서 2 x 1 덮개 2개를 넣는 경우를 고려하지 않는 이유는, a에서 이미 해당 경우가 고려되었기 때문
#   -> 점화식 : a_i = a_{i - 1} + 2 x a_{i - 2}
n = int(input())
d = [0] * 1001  # 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (Bottom-Up)
d[1] = 1
d[2] = 3
for i in range(3, n + 1):
    d[i] = (d[i - 1] + 2 * d[i - 2]) % 796796

print(d[n])  # 계산된 결과 출력

# Test Case.
# n = 3
# return : 5
